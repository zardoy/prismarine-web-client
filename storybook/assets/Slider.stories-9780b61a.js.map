{"version":3,"file":"Slider.stories-9780b61a.js","sources":["../../src/react/Slider.tsx"],"sourcesContent":["// Slider.tsx\nimport React, { useState, useEffect } from 'react'\nimport styles from './slider.module.css'\nimport SharedHudVars from './SharedHudVars'\n\ninterface Props extends React.ComponentProps<'div'> {\n  label: string;\n  value: number;\n  unit?: string;\n  width?: number;\n  valueDisplay?: string | number;\n  min?: number;\n  max?: number;\n  disabledReason?: string;\n\n  updateValue?: (value: number) => void;\n  updateOnDragEnd?: boolean;\n}\n\nconst Slider: React.FC<Props> = ({\n  label,\n  unit = '%',\n  width,\n  value: valueProp,\n  valueDisplay,\n  min = 0,\n  max = 100,\n  disabledReason,\n\n  updateOnDragEnd = false,\n  updateValue,\n  ...divProps\n}) => {\n  const [value, setValue] = useState(valueProp)\n  const getRatio = (v = value) => Math.max(Math.min((v - min) / (max - min), 1), 0)\n  const [ratio, setRatio] = useState(getRatio())\n\n  useEffect(() => {\n    setValue(valueProp)\n  }, [valueProp])\n  useEffect(() => {\n    setRatio(getRatio())\n  }, [value, min, max])\n\n  const fireValueUpdate = (dragEnd: boolean, v = value) => {\n    if (updateOnDragEnd !== dragEnd) return\n    updateValue?.(v)\n  }\n\n  return (\n    <SharedHudVars>\n      <div className={styles['slider-container']} style={{ width }} {...divProps}>\n        <input\n          type=\"range\"\n          className={styles.slider}\n          min={min}\n          max={max}\n          value={value}\n          disabled={!!disabledReason}\n          onChange={(e) => {\n            const newValue = Number(e.target.value)\n            setValue(newValue)\n            fireValueUpdate(false, newValue)\n          }}\n          // todo improve correct handling of drag end\n          onLostPointerCapture={() => {\n            fireValueUpdate(true)\n          }}\n          onPointerUp={() => {\n            fireValueUpdate(true)\n          }}\n          onKeyUp={() => {\n            fireValueUpdate(true)\n          }}\n        />\n        <div className={styles.disabled} title={disabledReason} />\n        <div className={styles['slider-thumb']} style={{ left: `calc((100% * ${ratio}) - (8px * ${ratio}))` }} />\n        <label className={styles.label}>\n          {label}: {valueDisplay ?? value} {unit}\n        </label>\n      </div>\n    </SharedHudVars>\n  )\n}\n\nexport default Slider\n"],"names":["Slider","label","unit","width","valueProp","valueDisplay","min","max","disabledReason","updateOnDragEnd","updateValue","divProps","value","setValue","useState","getRatio","v","ratio","setRatio","useEffect","fireValueUpdate","dragEnd","jsx","SharedHudVars","jsxs","styles","e","newValue"],"mappings":"0UAmBAA,EAAA,CAAA,CAAiC,MAAAC,EAC/B,KAAAC,EAAA,IACO,MAAAC,EACP,MAAAC,EACO,aAAAC,EACP,IAAAC,EAAA,EACM,IAAAC,EAAA,IACA,eAAAC,EACN,gBAAAC,EAAA,GAEkB,YAAAC,EAClB,GAAAC,CAEF,IAAA,CACE,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAAAV,CAAA,EACAW,EAAA,CAAAC,EAAAJ,IAAA,KAAA,IAAA,KAAA,KAAAI,EAAAV,IAAAC,EAAAD,GAAA,CAAA,EAAA,CAAA,EACA,CAAAW,EAAAC,CAAA,EAAAJ,EAAAA,SAAAC,EAAA,CAAA,EAEAI,EAAAA,UAAA,IAAA,CACEN,EAAAT,CAAA,CAAkB,EAAA,CAAAA,CAAA,CAAA,EAEpBe,EAAAA,UAAA,IAAA,CACED,EAAAH,EAAA,CAAA,CAAmB,EAAA,CAAAH,EAAAN,EAAAC,CAAA,CAAA,EAGrB,MAAAa,EAAA,CAAAC,EAAAL,EAAAJ,IAAA,CACEH,IAAAY,IACAX,GAAA,MAAAA,EAAAM,GAAe,EAGjB,OAAAM,EAAAC,EAAA,CAAA,SAAAC,EAAA,MAAA,CAAA,UAAAC,EAAA,kBAAA,EAAA,MAAA,CAAA,MAAAtB,CAAA,EAAA,GAAAQ,EAAA,SAAA,CAGMW,EAAA,QAAC,CAAA,KAAA,QACM,UAAAG,EAAA,OACa,IAAAnB,EAClB,IAAAC,EACA,MAAAK,EACA,SAAA,CAAA,CAAAJ,EACY,SAAAkB,GAAA,CAEV,MAAAC,EAAA,OAAAD,EAAA,OAAA,KAAA,EACAb,EAAAc,CAAA,EACAP,EAAA,GAAAO,CAAA,CAA+B,EACjC,qBAAA,IAAA,CAGEP,EAAA,EAAA,CAAoB,EACtB,YAAA,IAAA,CAEEA,EAAA,EAAA,CAAoB,EACtB,QAAA,IAAA,CAEEA,EAAA,EAAA,CAAoB,CACtB,CAAA,EACFE,EAAA,MAAA,CAAA,UAAAG,EAAA,SAAA,MAAAjB,EAAA,EACwDc,EAAA,MAAA,CAAA,UAAAG,EAAA,cAAA,EAAA,MAAA,CAAA,KAAA,gBAAAR,CAAA,cAAAA,CAAA,IAAA,EAAA,EAC+CO,EAAA,QAAA,CAAA,UAAAC,EAAA,MAAA,SAAA,CAEpGxB,EAAA,KAAMI,GAAAO,EAAmB,IAAMV,CAAE,EAAA,CACpC,CAAA,CAAA,CAAA,CAAA,CAIR;;;;;;;;;"}