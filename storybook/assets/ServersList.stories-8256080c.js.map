{"version":3,"file":"ServersList.stories-8256080c.js","sources":["../../src/react/SelectGameVersion.tsx","../../src/react/AddServerOrConnect.tsx","../../src/react/ServersList.tsx"],"sourcesContent":["import React, { CSSProperties } from 'react'\nimport Select from './Select'\n\ntype Version = { value: string, label: string }\n\nexport default (\n  { versions, selected, onChange, updateOptions, containerStyle }:\n    {\n      versions: Version[],\n      selected?: Version,\n      onChange?: (newValue: string) => void,\n      updateOptions?: (newSel: string) => void,\n    } & Pick<React.ComponentProps<typeof Select>, 'containerStyle' | 'placeholder' | 'disabled'>\n) => {\n  return <Select\n    initialOptions={versions}\n    defaultValue={selected}\n    updateOptions={(newSel) => {\n      updateOptions?.(newSel)\n    }}\n    onValueChange={onChange}\n    containerStyle={containerStyle ?? { width: '190px' }}\n    getCssOnInput={(value) => {\n      if (!versions || !value) return {}\n      const parsedsupportedVersions = versions.map(x => x.value.split('.').map(Number))\n      const parsedValue = value.split('.').map(Number)\n\n      const compareVersions = (v1, v2) => {\n        for (let i = 0; i < Math.max(v1.length, v2.length); i++) {\n          const num1 = v1[i] || 0\n          const num2 = v2[i] || 0\n          if (num1 > num2) return 1\n          if (num1 < num2) return -1\n        }\n        return 0\n      }\n\n      parsedsupportedVersions.sort(compareVersions)\n      const minVersion = parsedsupportedVersions[0]\n      const maxVersion = parsedsupportedVersions.at(-1)\n\n      const isWithinRange = compareVersions(parsedValue, minVersion) >= 0 && compareVersions(parsedValue, maxVersion) <= 0\n      if (!isWithinRange) return { border: '1px solid red' }\n      if (!versions.some(x => x.value === value)) return { border: '1px solid yellow' }\n    }}\n  />\n\n}\n","import React from 'react'\nimport Screen from './Screen'\nimport Input from './Input'\nimport Button from './Button'\nimport SelectGameVersion from './SelectGameVersion'\nimport { useIsSmallWidth } from './simpleHooks'\n\nexport interface BaseServerInfo {\n  ip: string\n  name?: string\n  versionOverride?: string\n  proxyOverride?: string\n  usernameOverride?: string\n  /** Username or always use new if true */\n  authenticatedAccountOverride?: string | true\n}\n\ninterface Props {\n  onBack: () => void\n  onConfirm: (info: BaseServerInfo) => void\n  title?: string\n  initialData?: BaseServerInfo\n  parseQs?: boolean\n  onQsConnect?: (server: BaseServerInfo) => void\n  placeholders?: Pick<BaseServerInfo, 'proxyOverride' | 'usernameOverride'>\n  accounts?: string[]\n  authenticatedAccounts?: number\n  versions?: string[]\n}\n\nconst ELEMENTS_WIDTH = 190\n\nexport default ({ onBack, onConfirm, title = 'Add a Server', initialData, parseQs, onQsConnect, placeholders, accounts, versions, authenticatedAccounts }: Props) => {\n  const qsParams = parseQs ? new URLSearchParams(window.location.search) : undefined\n  const qsParamName = qsParams?.get('name')\n  const qsParamIp = qsParams?.get('ip')\n  const qsParamVersion = qsParams?.get('version')\n  const qsParamProxy = qsParams?.get('proxy')\n  const qsParamUsername = qsParams?.get('username')\n  const qsParamLockConnect = qsParams?.get('lockConnect')\n\n  const qsIpParts = qsParamIp?.split(':')\n  const ipParts = initialData?.ip.split(':')\n\n  const [serverName, setServerName] = React.useState(initialData?.name ?? qsParamName ?? '')\n  const [serverIp, setServerIp] = React.useState(ipParts?.[0] ?? qsIpParts?.[0] ?? '')\n  const [serverPort, setServerPort] = React.useState(ipParts?.[1] ?? qsIpParts?.[1] ?? '')\n  const [versionOverride, setVersionOverride] = React.useState(initialData?.versionOverride ?? /* legacy */ initialData?.['version'] ?? qsParamVersion ?? '')\n  const [proxyOverride, setProxyOverride] = React.useState(initialData?.proxyOverride ?? qsParamProxy ?? '')\n  const [usernameOverride, setUsernameOverride] = React.useState(initialData?.usernameOverride ?? qsParamUsername ?? '')\n  const lockConnect = qsParamLockConnect === 'true'\n\n  const smallWidth = useIsSmallWidth()\n  const initialAccount = initialData?.authenticatedAccountOverride\n  const [accountIndex, setAccountIndex] = React.useState(initialAccount === true ? -2 : initialAccount ? (accounts?.includes(initialAccount) ? accounts.indexOf(initialAccount) : -2) : -1)\n\n  const freshAccount = accountIndex === -2\n  const noAccountSelected = accountIndex === -1\n  const authenticatedAccountOverride = noAccountSelected ? undefined : freshAccount ? true : accounts?.[accountIndex]\n\n  let ipFinal = serverIp.includes(':') ? serverIp : `${serverIp}:${serverPort}`\n  ipFinal = ipFinal.replace(/:$/, '')\n  const commonUseOptions: BaseServerInfo = {\n    name: serverName,\n    ip: ipFinal,\n    versionOverride: versionOverride || undefined,\n    proxyOverride: proxyOverride || undefined,\n    usernameOverride: usernameOverride || undefined,\n    authenticatedAccountOverride,\n  }\n\n  return <Screen title={qsParamIp ? 'Connect to Server' : title} backdrop>\n    <form\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        height: '100%'\n      }}\n      onSubmit={(e) => {\n        e.preventDefault()\n        onConfirm(commonUseOptions)\n      }}\n    >\n      <div style={{\n        display: 'grid',\n        gap: 3,\n        gridTemplateColumns: smallWidth ? '1fr' : '1fr 1fr'\n      }}\n      >\n        {!lockConnect && <>\n          <div style={{ gridColumn: smallWidth ? '' : 'span 2', display: 'flex', justifyContent: 'center' }}>\n            <InputWithLabel label=\"Server Name\" value={serverName} onChange={({ target: { value } }) => setServerName(value)} placeholder='Defaults to IP' />\n          </div>\n        </>}\n        <InputWithLabel required label=\"Server IP\" value={serverIp} disabled={lockConnect && qsIpParts?.[0] !== null} onChange={({ target: { value } }) => setServerIp(value)} />\n        <InputWithLabel label=\"Server Port\" value={serverPort} disabled={lockConnect && qsIpParts?.[1] !== null} onChange={({ target: { value } }) => setServerPort(value)} placeholder='25565' />\n        <div style={{ gridColumn: smallWidth ? '' : 'span 2' }}>Overrides:</div>\n        <div style={{\n          display: 'flex',\n          flexDirection: 'column',\n        }}>\n          <label style={{ fontSize: 12, marginBottom: 1, color: 'lightgray' }}>Version Override</label>\n          <SelectGameVersion\n            selected={{ value: versionOverride, label: versionOverride }}\n            versions={versions?.map(v => { return { value: v, label: v } }) ?? []}\n            onChange={(value) => {\n              setVersionOverride(value)\n            }}\n            placeholder=\"Optional, but recommended to specify\"\n            disabled={lockConnect && qsParamVersion !== null}\n          />\n        </div>\n\n        <InputWithLabel label=\"Proxy Override\" value={proxyOverride} disabled={lockConnect && qsParamProxy !== null} onChange={({ target: { value } }) => setProxyOverride(value)} placeholder={placeholders?.proxyOverride} />\n        <InputWithLabel label=\"Username Override\" value={usernameOverride} disabled={!noAccountSelected || lockConnect && qsParamUsername !== null} onChange={({ target: { value } }) => setUsernameOverride(value)} placeholder={placeholders?.usernameOverride} />\n        <label style={{\n          display: 'flex',\n          flexDirection: 'column',\n        }}\n        >\n          <span style={{ fontSize: 12, marginBottom: 1, color: 'lightgray' }}>Account Override</span>\n          <select\n            onChange={({ target: { value } }) => setAccountIndex(Number(value))}\n            style={{\n              background: 'gray',\n              color: 'white',\n              height: 20,\n              fontSize: 13,\n            }}\n            defaultValue={initialAccount === true ? -2 : initialAccount === undefined ? -1 : (fallbackIfNotFound((accounts ?? []).indexOf(initialAccount)) ?? -2)}\n          >\n            <option value={-1}>Offline Account (Username)</option>\n            {accounts?.map((account, i) => <option key={i} value={i}>{account} (Logged In)</option>)}\n            <option value={-2}>Any other MS account</option>\n          </select>\n        </label>\n\n        {!lockConnect && <>\n          <ButtonWrapper onClick={() => {\n            onBack()\n          }}>Cancel</ButtonWrapper>\n          <ButtonWrapper type='submit'>Save</ButtonWrapper>\n        </>}\n        {qsParamIp && <div style={{ gridColumn: smallWidth ? '' : 'span 2', display: 'flex', justifyContent: 'center' }}>\n          <ButtonWrapper\n            data-test-id='connect-qs'\n            onClick={() => {\n              onQsConnect?.(commonUseOptions)\n            }}\n          >Connect</ButtonWrapper>\n        </div>}\n      </div>\n    </form>\n  </Screen>\n}\n\nconst ButtonWrapper = ({ ...props }: React.ComponentProps<typeof Button>) => {\n  props.style ??= {}\n  props.style.width = ELEMENTS_WIDTH\n  return <Button {...props} />\n}\n\nconst InputWithLabel = ({ label, span, ...props }: React.ComponentProps<typeof Input> & { label, span? }) => {\n  return <div style={{\n    display: 'flex',\n    flexDirection: 'column',\n    gridRow: span ? 'span 2 / span 2' : undefined,\n  }}\n  >\n    <label style={{ fontSize: 12, marginBottom: 1, color: 'lightgray' }}>{label}</label>\n    <Input rootStyles={{ width: ELEMENTS_WIDTH }} {...props} />\n  </div>\n}\n\nconst fallbackIfNotFound = (index: number) => (index === -1 ? undefined : index)\n","import React from 'react'\nimport Singleplayer from './Singleplayer'\nimport Input from './Input'\nimport Button from './Button'\nimport PixelartIcon, { pixelartIcons } from './PixelartIcon'\nimport Select from './Select'\nimport { BaseServerInfo } from './AddServerOrConnect'\nimport { useIsSmallWidth } from './simpleHooks'\n\ninterface Props extends React.ComponentProps<typeof Singleplayer> {\n  joinServer: (info: BaseServerInfo, additional: {\n    shouldSave?: boolean\n    index?: number\n  }) => void\n  initialProxies: SavedProxiesLocalStorage\n  updateProxies: (proxies: SavedProxiesLocalStorage) => void\n  username: string\n  setUsername: (username: string) => void\n  onProfileClick?: () => void\n  setQuickConnectIp?: (ip: string) => void\n}\n\nexport interface SavedProxiesLocalStorage {\n  proxies: readonly string[]\n  selected: string\n}\n\ntype ProxyStatusResult = {\n  time: number\n  ping: number\n  status: 'success' | 'error' | 'unknown'\n}\n\nexport default ({ initialProxies, updateProxies: updateProxiesProp, joinServer, username, setUsername, onProfileClick, setQuickConnectIp, ...props }: Props) => {\n  const [proxies, setProxies] = React.useState(initialProxies)\n\n  const updateProxies = (newData: SavedProxiesLocalStorage) => {\n    setProxies(newData)\n    updateProxiesProp(newData)\n  }\n\n  const [serverIp, setServerIp] = React.useState('')\n  const [save, setSave] = React.useState(true)\n  const [activeHighlight, setActiveHighlight] = React.useState(undefined as 'quick-connect' | 'server-list' | undefined)\n\n  const getActiveHighlightStyles = (type: typeof activeHighlight) => {\n    const styles: React.CSSProperties = {\n      transition: 'filter 0.2s',\n    }\n    if (activeHighlight && activeHighlight !== type) {\n      styles.filter = 'brightness(0.7)'\n    }\n    return styles\n  }\n\n  const isSmallWidth = useIsSmallWidth()\n\n  return <Singleplayer\n    {...props}\n    firstRowChildrenOverride={<form\n      style={{ width: '100%', display: 'flex', justifyContent: 'center' }} onSubmit={(e) => {\n        e.preventDefault()\n        let ip = serverIp\n        let version\n        let msAuth = false\n        const parts = ip.split(':')\n        if (parts.at(-1) === 'ms') {\n          msAuth = true\n          parts.pop()\n        }\n        if (parts.length > 1 && parts.at(-1)!.includes('.')) {\n          version = parts.at(-1)!\n          ip = parts.slice(0, -1).join(':')\n        }\n        joinServer({\n          ip,\n          versionOverride: version,\n          authenticatedAccountOverride: msAuth ? true : undefined, // todo popup selector\n        }, {\n          shouldSave: save,\n        })\n      }}\n    >\n      <div\n        style={{ display: 'flex', gap: 5, alignItems: 'center', ...getActiveHighlightStyles('quick-connect') }}\n        className='quick-connect-row'\n        onMouseEnter={() => setActiveHighlight('quick-connect')}\n        onMouseLeave={() => setActiveHighlight(undefined)}\n      >\n        {/* todo history */}\n        <Input\n          required\n          placeholder='Quick Connect IP (:version)'\n          value={serverIp}\n          onChange={({ target: { value } }) => {\n            setQuickConnectIp?.(value)\n            setServerIp(value)\n          }}\n          width={isSmallWidth ? 120 : 180}\n        />\n        <label style={{ fontSize: 10, display: 'flex', alignItems: 'center', gap: 5, height: '100%', marginTop: '-1px' }}>\n          <input\n            type='checkbox' checked={save}\n            style={{ borderRadius: 0 }}\n            onChange={({ target: { checked } }) => setSave(checked)}\n          /> Save\n        </label>\n        <Button style={{ width: 90 }} type='submit'>Connect</Button>\n      </div>\n    </form>}\n    searchRowChildrenOverride={\n      <div style={{\n        // marginTop: 12,\n      }}\n      >\n        <div style={{ display: 'flex', gap: 3, alignItems: 'center' }}>\n          {isSmallWidth\n            ? <PixelartIcon iconName={pixelartIcons.server} styles={{ fontSize: 14, color: 'lightgray', marginLeft: 2 }} onClick={onProfileClick} />\n            : <span style={{ color: 'lightgray', fontSize: 14 }}>Proxy:</span>}\n          <Select\n            initialOptions={proxies.proxies.map(p => { return { value: p, label: p } })}\n            defaultValue={{ value: proxies.selected, label: proxies.selected }}\n            updateOptions={(newSel) => {\n              updateProxies({ proxies: [...proxies.proxies], selected: newSel })\n            }}\n            containerStyle={{\n              width: isSmallWidth ? 140 : 180,\n            }}\n          />\n          <PixelartIcon iconName='user' styles={{ fontSize: 14, color: 'lightgray', marginLeft: 2 }} onClick={onProfileClick} />\n          <Input rootStyles={{ width: 80 }} value={username} onChange={({ target: { value } }) => setUsername(value)} />\n        </div>\n      </div>\n    }\n    serversLayout\n    onWorldAction={(action, serverName) => {\n      if (action === 'load') {\n        joinServer({\n          ip: serverName,\n        }, {})\n      }\n      props.onWorldAction?.(action, serverName)\n    }}\n    setListHovered={(hovered) => {\n      setActiveHighlight(hovered ? 'server-list' : undefined)\n    }}\n    listStyle={getActiveHighlightStyles('server-list')}\n    secondRowStyles={getActiveHighlightStyles('server-list')}\n  />\n}\n"],"names":["SelectGameVersion$1","versions","selected","onChange","updateOptions","containerStyle","jsx","Select","newSel","value","parsedsupportedVersions","x","parsedValue","compareVersions","v1","v2","i","num1","num2","minVersion","maxVersion","ELEMENTS_WIDTH","AddServerOrConnect$1","onBack","onConfirm","title","initialData","parseQs","onQsConnect","placeholders","accounts","authenticatedAccounts","qsParams","qsParamName","qsParamIp","qsParamVersion","qsParamProxy","qsParamUsername","qsParamLockConnect","qsIpParts","ipParts","serverName","setServerName","React","serverIp","setServerIp","serverPort","setServerPort","versionOverride","setVersionOverride","proxyOverride","setProxyOverride","usernameOverride","setUsernameOverride","lockConnect","smallWidth","useIsSmallWidth","initialAccount","accountIndex","setAccountIndex","freshAccount","noAccountSelected","authenticatedAccountOverride","ipFinal","commonUseOptions","Screen","e","jsxs","Fragment","InputWithLabel","SelectGameVersion","v","fallbackIfNotFound","account","ButtonWrapper","props","Button","label","span","Input","index","ServersList$1","initialProxies","updateProxiesProp","joinServer","username","setUsername","onProfileClick","setQuickConnectIp","proxies","setProxies","updateProxies","newData","save","setSave","activeHighlight","setActiveHighlight","getActiveHighlightStyles","type","styles","isSmallWidth","Singleplayer","ip","version","msAuth","parts","checked","PixelartIcon","pixelartIcons","p","action","_a","hovered"],"mappings":"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"}