{"version":3,"file":"MessageFormattedString-24d5abea.js","sources":["../../src/react/MessageFormattedString.tsx"],"sourcesContent":["import { useMemo } from 'react'\nimport { fromFormattedString } from '@xmcl/text-component'\nimport { formatMessage } from '../chatUtils'\nimport MessageFormatted from './MessageFormatted'\n\n/** like MessageFormatted, but receives raw string or json instead, uses window.loadedData */\nexport default ({ message, fallbackColor, className }: {\n  message: string | Record<string, any> | null,\n  fallbackColor?: string,\n  className?: string\n}) => {\n  const messageJson = useMemo(() => {\n    if (!message) return null\n    try {\n      const texts = formatMessage(typeof message === 'string' ? fromFormattedString(message) : message)\n      return texts.map(text => {\n        return {\n          ...text,\n          color: text.color ?? fallbackColor,\n        }\n      })\n    } catch (err) {\n      console.error(err) // todo ensure its being logged\n      return null\n    }\n  }, [message])\n\n  return messageJson ? <MessageFormatted parts={messageJson} className={className} /> : null\n}\n"],"names":["MessageFormattedString$1","message","fallbackColor","className","messageJson","useMemo","formatMessage","fromFormattedString","text","err","jsx","MessageFormatted"],"mappings":"4LAMA,MAAAA,EAAA,CAAA,CAAA,QAAAC,EAAA,cAAAC,EAAA,UAAAC,KAAA,CAKE,MAAAC,EAAAC,EAAAA,QAAA,IAAA,CACE,GAAA,CAAAJ,EAAc,OAAA,KACd,GAAA,CAEE,OADAK,EAAA,OAAAL,GAAA,SAAAM,EAAAN,CAAA,EAAAA,CAAA,EACA,IAAAO,IACE,CAAO,GAAAA,EACF,MAAAA,EAAA,OAAAN,CACkB,EACvB,CACD,OAAAO,EAAA,CAED,eAAA,MAAAA,CAAA,EACA,IAAO,CACT,EAAA,CAAAR,CAAA,CAAA,EAGF,OAAAG,EAAAM,EAAAC,EAAA,CAAA,MAAAP,EAAA,UAAAD,EAAA,EAAA,IACF"}